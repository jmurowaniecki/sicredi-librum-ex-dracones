version: 2.1

parameters:

  CLI:
    type: string
    default: ${CLI}



executors:

  buildpack:
    docker:
      - image: circleci/buildpack-deps:stretch

  node-angular:
    docker:
      - image: lambdadeveloper/compilouit:angular

  unstable:
    docker:
      - image: lambdadeveloper/sicredi:bloated



commands:

  setup-versioning:
    description: "Setup GIT versioning."
    steps:
      - when:
          condition: << pipeline.parameters.CLI >>
          steps:
            - run:
                name: Local build handling.
                command: |
                  if [[ ${CIRCLE_SHELL_ENV} =~ "localbuild" ]]
                  then if [ -d /workdir ]
                    then ln -s /workdir /tmp/_circleci_local_build_repo
                    else echo 'Try to execute using `make circleci...` - see `make help` for examples.'
                        exit 1
                    fi
                  fi
            - checkout
      - unless:
          condition: << pipeline.parameters.CLI >>
          steps:
            - attach_workspace:
                at: .

  docker-login:
    description: "Performs login on DockerHub"
    steps:
      - run:
          name: Dockerhub authentication.
          command: |
            echo -n "${DOCKER_PASSWORD}" | docker login --username "${DOCKER_USERNAME}" --password-stdin



  docker-build:
    description: "Build and push work in progress for APP."
    parameters:
      file:
        type: string
      description:
        type: string
      tag:
        type: string
        default: ""
      namespace:
        type: string
        default: ${DOCKER_USERNAME}/${APP}
    steps:
      - run:
          name: << parameters.description >>
          command: |
            USETAG=<< parameters.tag >>
            TARGET=<< parameters.namespace >>
            [ ! -z ${USETAG} ] && SOURCE=${TARGET}:${USETAG}
            docker build -t ${SOURCE:-${TARGET}} . -f << parameters.file >>
            docker push     ${TARGET}:${USETAG:-latest}



  docker-clone:
    description: "Build and push work in progress for APP."
    parameters:
      description:
        type: string
      source:
        type: string
        default: latest
      target:
        type: string
        default: latest
      origin:
        type: string
        default: ${DOCKER_USERNAME}/${APP}
      namespace:
        type: string
        default: ${DOCKER_USERNAME}/${APP}
    steps:
      - run:
          name: << parameters.description >>
          command: |
            docker tag  << parameters.origin    >>:<< parameters.source >> \
                        << parameters.namespace >>:<< parameters.target >>
            docker push << parameters.namespace >>:<< parameters.target >>



  docker-pull:
    description: "Pull containers from source."
    parameters:
      description:
        type: string
      tag:
        type: string
        default: latest
      origin:
        type: string
        default: ${DOCKER_USERNAME}/${APP}
    steps:
      - run:
          name: << parameters.description >>
          command: |
            docker pull << parameters.origin >>:<< parameters.tag >>



jobs:

  quality:
    executor: unstable
    working_directory: /application/app
    steps:

      - restore_cache:
          key: app-modules-{{ checksum "package.json" }}

      - run:
          name: Perform instalations - ensure latest modules.
          command: yarn install

      - save_cache:
          key: app-modules-{{ checksum "package.json" }}
          paths:
            - node_modules

      - run:
          name: Perform Lint
          command: yarn run lint

      - persist_to_workspace:
          root: .
          paths:
            - .



  build:
    machine: true
    steps:
      - setup-versioning

      - docker-login

      - docker-build:
          description: Build and push work in progress for APP.
          file: ./app/Dockerfile
          tag: bloated

      - docker-build:
          description: Build and push latest TAG for APP.
          file: ./app/BUILD.Dockerfile



  deploy:
    machine: true
    steps:
      - setup-versioning

      - docker-login

      - run: |
          if [[ $(command -v heroku) == "" ]]; then
            curl https://cli-assets.heroku.com/install.sh | sh
          else
            echo "Heroku is already installed. No operation was performed."
          fi

      - run: |
            bash .circleci/setup-heroku.sh
            echo "${HEROKU_API_KEY}" | docker login registry.heroku.com --username "_" --password-stdin

      - docker-build:
          description: Build and push latest TAG to Heroku.
          namespace: registry.heroku.com/${HEROKU_APP}/web
          file: ./app/BUILD.Dockerfile

      - run:
          name: Configure Heroku environment and release the deployed container.
          command: |
            heroku config:set HEROKU_APP_NAME=${HEROKU_APP}    -a ${HEROKU_APP}
            heroku config:set HEROKU_API_KEY=${HEROKU_API_KEY} -a ${HEROKU_APP}
            heroku container:login
            heroku container:release web  -a ${HEROKU_APP} || \
            heroku restart



workflows:

  version: 2.1

  all:

    jobs:
      - quality

      - build:
          requires:
            - quality
          filters:
            branches:
              only: master

      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
